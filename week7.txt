1.Pointers and Addresses
- ภาษา c มีความสามารถที่แตกต่างจากภาษาโปรแกรมโดยทั่วไปคือ โปรแกรมสามารถเข้าถึงและจัดการหน่วยความจำได้โดยการใช้ pointers
- pointer เป็นตัวแปรที่ใช้เก็บค่าตำแหน่งหรือ address ในหน่วยความจำ
- ค่าของตำแหน่งหรือ address ในหน่วยความจำคือจำนวนเต็มบอกที่เริ่มจาก 0

2.Pointer Operators 
- ในการใช้ pointer เรามีตัวดำเนินการอีก 2 ตัวถูกนิยามการใช้งานเพิ่มขึ้นจากตัวดำเนินการอื่น
2.1) & เรียกว่า address operator ซึ่ง unary operator ที่ต้องการเพียง 1 operand โดยที่ operand อยู่ในรูปตัวของตัวแปร
2.2) * เรียกว่า dereferncing operator หรือ indirection operator ซึ่งเป็น unary operator โดยที่ * ถูกใช้ในการเข้าถึงข้อมูลที่ถูกอ้างอิงโดยค่าตำแหน่งในหน่วยความจำที่มีค่าเป็น operand

3.ฟังก์ชัน scanf()
- ฟังก์ชัน scanf() เปรียบเทียบกับฟังก์ชัน printf() เพียงการทำงานที่ตรงข้ามกัน printf() จะแสดงผล standard output () แต่ scanf() เป็นการรับข้อมูลเข้ามาในโปรแกรมผ่าน standard input
- ชื่อตัวแปรอาร์เรย์เป็นนิพจน์ที่บอกค่า base address ของอาร์เรย์ คือ a จะให้ค่าตำแหน่งในหน่วยความจำที่ใช้เก็บข้อมูลตัวแรกในอาร์เรย์

4.Pointer กับ Array
- อารเย์สามารถเก็บข้อมูลมากกว่า 1 จำนวนที่เป็รประเภทเดียวกันเข้าไว้ด้วยกันภายใต้ตัวแปรเดียวกันได้

5.การจำลองการเรียกฟังก์ชันแบบ call by Reference
- การส่งผ่านค่าพารามิเตอร์ไปยังฟังก์ชันสามารถทำได้ 2 ลักษณะ เช่น call by value แบะ call by reference

6.การใช้ const กับ pointer
- ใน ANSI C standard คีย์เวิร์ด const ใช้ร่วมกับ pointer เพื่อแจ้งให้คอมไพเลอร์ทราบค่าของตัวแปรนั้นไม่สามารถแก้ไขได้

7.นิพจน์ใน pointer และการใช้ตัวดำเนินการคณิตศาสตร์กับ pointer (Expressions and pointer Arithmetic)
- ตัวแปร pointer สามารถเป็น operand ให้กับนิพจน์เหล่านี้ได้
 - นิพจน์ในทางคณิตศาสตร์
 - นิพจน์ในการกำหนดค่า
 - นิพจน์ในการเปรียบเทียบ

8.การใช้ pointer อ้างไปที่ฟังก์ชัน (Pointer to Functions)
- ใช้ตัวแปร pointer อ้างไปยังตำแหน่งในหน่วยความจำ (base address) ของฟังก์ชัน ที่ต้องการได้
- โดยปกติ ชื่อฟังก์ชันเป็นนิพจน์ที่ให้ค่า base address ของฟังก์ชัน
- การใช้ free()
    free(data);
- พารามิเตอร์ของ free() จะเป็นตำแหน่งในหน่วยความจำ (base address) ที่เราต้องการนคืนพื้นที่ให้กับระบบ

9.Complicated Declarations 
- int *f1(); //เป็นการประกาศฟังก์ชัน f1 ที่ส่งค่า pointer ไปยัง int กลับ

10.Segmentation fault(core dumped)
- เราพยายามเข้าถึงหน่วยความจำที่เราไม่ได้จองไว้หรือหน่วยความจำที่นอกเหนือจากตัวแปรที่เราประกาศไว้