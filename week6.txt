เรื่องของอาร์เรย์ (Array)
- การประกาศและเรียกใช้งานอาร์เรย์
- ส่งอาร์เรย์ไปยังฟังก์ชัน
- อาร์เรย์สองมิติ
- ข้อควรระวังในการใช้อาร์เรย์

กลุ่มของตัวแปรที่ถูกจัดการร่วมกัน
- จัดการอันตโนมัติโดยคอมไพล์เลอร์
- จัดการ : สร้าง,เรียกใช้
ตัวแปรต้องเป็นประเภทเดียวกัน
เช่น int 10 ตัว หรือ char 8 ตัว

การเรียกใช้อาร์เรย์
- เราต้องการเรียกใช้ตัวแปรในอาร์เรย์
- ตัวแปรแต่ละตัวจะมีเบอร์กำกับ(index)อยู่
- ใช้งานเหมือน int ตามปกติ

เบอร์ของตัวแปรในอาร์เรย์เริ่มจากศูนย์(0)
เช่น int A[10];
    A[0] ถึง A[9]
- ประกาศ int A[10] แต่เรียกใช้ A[10] ถึง A[9] เท่านั้น ไม่มี A[10]

การตั้งค่าเริ่มต้นของอาร์เรย์
- การตั้งค่าเริ่มต่น(initialization)
เช่น int b = 5 ;
- สำหรับอาร์เรย์
เช่น int A[10]={0,1,2,3,4,5,6,7,8,9};

การวนลูปเพื่อจัดการกับตัวแปรทุกตัวในอาร์เรย์
- for (i=0;i<10;i++) หรือ for (i=0;i<=10-9;i++)

รายละเอียดการใช้งาน
- ขนาดของอาร์เรย์ตอนประกาศควรเป็นค่าคงที่(constant)
- ค่าคงที่คือค่าที่ไม่มีการเปลียนแปลงตลอดการทำงานของโปรแกรม
- #define เป็นคำสั่ง (directive) ที่สั่งให้ compiler เปลียนอักษรทั้งหมดในโปรแกรมในก่อนคอมไพล์
- const เป็นตัวบังคับว่าตัวแปรนี้จะไม่มีการเปลี่ยนแปลงตลอดการทำงานของโปรแกรม

การใช้ตัวแปรกำหนดขนาดอาร์เรย์
- ใช้ได้กับคอมไพล์เลอร์ที่ทำตามมาตรฐาน C99
- คอมไพล์เลอร์บางตัวไม่ยอม

การส่งค่าจากอาร์เรย์ไปยังฟังก์ชัน
- ส่งค่าตัวแปนตัวหนึ่งในอาร์เรย์
- เป็นการ pass by value

2D array
- อาร์เรย์ปกติเป็น 1 มิติ (เป็นเส้น)
- อาร์เรย์สองมิติเป็นตาราง ประกาศแบบสองชั้น

อาร์เรย์ซ้อนอาร์เรย์
- เราสามารถมองอาร์เรย์สองมิติเป็นอาร์เรย์ของอาร์เรย์ได้

อาร์เรย์มากกว่าสองมิติ
- สามารถประกาศและเรียกใช้ได้เช่นกัน
- int A[2][3][4];

การเรียนแลปในสัปดาห์ที่ 6
#include<stdio.h>
// void addTen(int numbers[], int a)
void addTen(int *numbers, int n)
{

    for (int i = 0; i < n; i++)
    {
        printf("number + %d addr %d addr = %p, %d\n", i,*(numbers + 1));
        *(numbers) += 10;
    }
}
int addTwenty(int *n)
{
    *n += 20;
    return 1;
}
int main()
{
    int numbers[]={5, 6, 7, 8, 9, 0};
    int n = 6;
    addTen(&numbers[0], n); 
    for (int i = 0; i < 6; i++)
    {
        printf("number[%d] =%d\n",i ,numbers);
    }
    addTwenty(&n);
    printf("n = %d\n", n);
}